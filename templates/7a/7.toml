# trying to merge toml6 and toml5

title = "Template 7"

[base_sql]
sql = '''SELECT COUNT(*)
FROM title as t,
movie_info as mi1,
kind_type as kt,
info_type as it1,
info_type as it3,
info_type as it4,
movie_info_idx as mii1,
movie_info_idx as mii2,
movie_keyword as mk,
keyword as k,
aka_name as an,
name as n,
info_type as it5,
person_info as pi1,
cast_info as ci,
role_type as rt
WHERE
t.id = mi1.movie_id
AND t.id = ci.movie_id
AND t.id = mii1.movie_id
AND t.id = mii2.movie_id
AND t.id = mk.movie_id
AND mk.keyword_id = k.id
AND mi1.info_type_id = it1.id
AND mii1.info_type_id = it3.id
AND mii2.info_type_id = it4.id
AND t.kind_id = kt.id
AND (Xmovie_kind)
AND (Xprod_year_up)
AND (Xprod_year_low)
AND (Xmi1)
AND (Xit1)
AND it3.id = '100'
AND it4.id = '101'
AND (Xrating_up)
AND (Xrating_down)
AND (Xvotes_up)
AND (Xvotes_down)
AND n.id = ci.person_id
AND ci.person_id = pi1.person_id
AND it5.id = pi1.info_type_id
AND n.id = pi1.person_id
AND n.id = an.person_id
AND rt.id = ci.role_id
AND (Xgender)
AND (Xname)
AND (Xcast_note)
AND (Xrole)
AND (Xit5)
'''

# template 1
[[templates]]

  name = "1a"

  # all the unknown predicates in the base sql will be specified in groups
  [[templates.predicates]]
  type = "list"
  columns = ["t.production_year"]
  keys = ["Xprod_year_low", "Xprod_year_up"]
  dependencies = 0
  pred_type = "range"

  options = [[1925, 1975], [1975, 2015], [1875, 1975], [1925,
  2015], [1950, 1990]]
  sampling_method = "uniform"
  min_samples = 1
  max_samples = 1

  [[templates.predicates]]
  type = "sql"
  columns = ["kt.kind"]
  keys = ["Xmovie_kind"]
  pred_type = "IN"
  dependencies = 1

  sql = '''
  SELECT kt.kind, count(*)
  FROM title as t, kind_type as kt
  WHERE t.kind_id = kt.id
  AND (Xprod_year_up)
  AND (Xprod_year_low)
  GROUP BY kt.kind
  HAVING COUNT(*) > 20000
  ORDER BY count(*) desc
  '''

  sampling_method = "quantile"
  num_quantiles = 2
  min_samples = 3
  max_samples = 15

  [[templates.predicates]]
  # votes
  type = "list"
  columns = ["mii1.info"]
  numeric_col_type = "float"
  keys = ["Xvotes_down", "Xvotes_up"]
  pred_type = "range"

  options = [[0.0, 1000.00], [1000.00, 10000.0], [5000.00, 500000.0],
      [0.0,10000.0]]

  sampling_method = "uniform"
  min_samples = 1
  max_samples = 1

  [[templates.predicates]]
  # ratings
  type = "list"
  columns = ["mii2.info"]
  numeric_col_type = "float"
  keys = ["Xrating_up", "Xrating_down"]
  pred_type = "range"

  # TODO: add more.
  options = [[0.0, 4.0], [3.0, 7.0], [7.0,11.0], [2.0,5.0], [0.0,8.0]]
  sampling_method = "uniform"
  min_samples = 1
  max_samples = 1

  # TODO: sample for this based on predicates selected for it3,it4,kt,t.prod
  [[templates.predicates]]
  type = "sql"
  columns = ["it1.id"]
  keys = ["Xit1"]
  dependencies = 1
  pred_type = "IN"

  sql = '''
  SELECT it.id, count(*)
	FROM movie_info as mi, info_type as it, title as t
	WHERE t.id = mi.movie_id
	AND mi.info_type_id = it.id
  AND (Xprod_year_up)
  AND (Xprod_year_low)
	GROUP BY it.id HAVING COUNT(*) > 10000
  ORDER BY COUNT(*) DESC
  '''

  sampling_method = "quantile"
  num_quantiles = 1
  min_samples = 1
  max_samples = 3

  # TODO: sample for this based on predicates selected for it1,it3,it4,kt,t.prod
  [[templates.predicates]]
  type = "sql"
  columns = ["mi1.info"]
  keys = ["Xmi1"]
  dependencies = 1
  pred_type = "IN"

  sql = '''
  SELECT mi1.info, count(*)
  FROM movie_info as mi1,
  info_type as it1, kind_type as kt,
  title as t
  WHERE t.id = mi1.movie_id
  AND mi1.info_type_id = it1.id
  AND t.kind_id = kt.id
  AND (Xit1)
  AND (Xmovie_kind)
  AND (Xprod_year_up)
  AND (Xprod_year_low)
  GROUP BY mi1.info
  HAVING count(*) > 3000
  ORDER BY count(*) desc
  '''

  sampling_method = "quantile"
  num_quantiles = 2
  min_samples = 10
  max_samples = 20

  [[templates.predicates]]
  type = "list"
  columns = ["it5.id"]
  keys = ["Xit5"]
  dependencies = 0
  # 22: height, 34: trademark
  options = ["22", "19", "25", "26", "31", "32", "34", "37"]
  sampling_method = "uniform"
  pred_type = "in"
  min_samples = 4
  max_samples = 8

  [[templates.predicates]]

  type = "sql"
  columns = ["n.gender"]
  keys = ["Xgender"]
  dependencies = 0
  sampling_method = "uniform"
  sql = '''select distinct name.gender from name'''
  pred_type = "in"
  min_samples = 1
  max_samples = 3

  #--> highly correlated columns.
  [[templates.predicates]]
  type = "sql"
  columns = ["ci.note", "rt.role", "n.name_pcode_nf"]
  keys = ["Xcast_note", "Xrole", "Xname"]
  pred_type = "in"
  dependencies = 1
  sampling_method = "quantile"
  num_quantiles = 2

  # note: HAVING COUNT threshold is arbitrary, but chosen so most `interesting'
  # cases are over that threshold
  sql = '''
  SELECT ci.note, rt.role, n.name_pcode_nf, COUNT(*)
  FROM role_type as rt, cast_info as ci,
  name as n, title as t, kind_type as kt
  WHERE rt.id = ci.role_id
  AND n.id = ci.person_id
  AND t.id = ci.movie_id
  AND t.kind_id = kt.id
  AND (Xgender)
  AND (Xprod_year_up)
  AND (Xprod_year_low)
  AND (Xmovie_kind)
  GROUP BY
  ci.note, rt.role, n.name_pcode_nf
  HAVING COUNT(*) > 2000
  ORDER BY
  COUNT(*) DESC;
  '''

  min_samples = 10
  max_samples = 15
